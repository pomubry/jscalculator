{"version":3,"sources":["components/buttons.js","components/Display.js","styles/github.svg","App.js","index.js"],"names":["buttons","id","text","value","Display","stateCopy","handleClick","total","input","btn","map","obj","onClick","className","style","height","length","slice","App","useState","setTotal","setInput","ans","setAns","e","target","symbolRegex","numRegex","lastChar","secondLastChar","equalCheck","includes","test","prevState","index","copy","evaluate","href","src","github","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.363325ca.chunk.js","sourcesContent":["let buttons = [\r\n  {\r\n    id: 'zero',\r\n    text: '0',\r\n    value: 0,\r\n  },\r\n  {\r\n    id: 'one',\r\n    text: '1',\r\n    value: 1,\r\n  },\r\n  {\r\n    id: 'two',\r\n    text: '2',\r\n    value: 2,\r\n  },\r\n  {\r\n    id: 'three',\r\n    text: '3',\r\n    value: 3,\r\n  },\r\n  {\r\n    id: 'four',\r\n    text: '4',\r\n    value: 4,\r\n  },\r\n  {\r\n    id: 'five',\r\n    text: '5',\r\n    value: 5,\r\n  },\r\n  {\r\n    id: 'six',\r\n    text: '6',\r\n    value: 6,\r\n  },\r\n  {\r\n    id: 'seven',\r\n    text: '7',\r\n    value: 7,\r\n  },\r\n  {\r\n    id: 'eight',\r\n    text: '8',\r\n    value: 8,\r\n  },\r\n  {\r\n    id: 'nine',\r\n    text: '9',\r\n    value: 9,\r\n  },\r\n  {\r\n    id: 'add',\r\n    text: '+',\r\n    value: '+',\r\n  },\r\n  {\r\n    id: 'subtract',\r\n    text: '-',\r\n    value: '-',\r\n  },\r\n  {\r\n    id: 'multiply',\r\n    text: 'x',\r\n    value: '*',\r\n  },\r\n  {\r\n    id: 'divide',\r\n    text: 'รท',\r\n    value: '/',\r\n  },\r\n  {\r\n    id: 'clear',\r\n    text: 'AC',\r\n    value: 'clear',\r\n  },\r\n  {\r\n    id: 'equals',\r\n    text: '=',\r\n    value: 'equals',\r\n  },\r\n  {\r\n    id: 'decimal',\r\n    text: '.',\r\n    value: '.',\r\n  },\r\n];\r\n\r\nexport default buttons;\r\n","import buttons from './buttons';\r\n\r\nfunction Display({ stateCopy, handleClick }) {\r\n  const { total, input } = stateCopy;\r\n\r\n  const btn = buttons.map((obj) => {\r\n    return (\r\n      <button key={obj.id} id={obj.id} onClick={handleClick} value={obj.value}>\r\n        {obj.text}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"calc\">\r\n      <div className=\"displayStyle\">\r\n        {/* Expression will truncate from the left when the string is at least 22 characters long */}\r\n        <div className=\"total\" style={{ height: '100%' }}>\r\n          {total.length > 22 ? `...${total.slice(total.length - 22)}` : total}\r\n        </div>\r\n        <div id=\"display\">\r\n          {input.length > 22 ? `...${input.slice(input.length - 22)}` : input}\r\n        </div>\r\n      </div>\r\n      <div className=\"buttons\">{btn}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","export default __webpack_public_path__ + \"static/media/github.4da5e4a9.svg\";","import { useState } from 'react';\nimport { evaluate } from 'mathjs';\nimport Display from './components/Display';\nimport github from './styles/github.svg';\n\nconst App = () => {\n  /*Note about state:\n      -'total' refers to the overall expression to be evaluated. This is the expression at the top of the display.\n      -'input' refers to the current expression the user is typing. This is the expression at the bottom of the display.   */\n\n  const [total, setTotal] = useState('');\n  const [input, setInput] = useState('0');\n  const [ans, setAns] = useState('');\n\n  const handleClick = (e) => {\n    // symbolRegex is for the four basic operations: +, -, x, /\n    const { value } = e.target;\n    const symbolRegex = /[+\\-*/]/;\n    const numRegex = /[0-9]|\\./;\n    const lastChar = total[total.length - 1];\n    const secondLastChar = total[total.length - 2];\n    // If the input is a dot, append a '0' before it, else keep it as is.\n    const equalCheck = value === '.' ? '0.' : value;\n\n    // Clear all state when 'AC' is pressed.\n    if (value === 'clear') {\n      setTotal('');\n      setAns('');\n      setInput('0');\n    }\n\n    // Line 34 prevents multiple starting 0's,\n    // prevents multiple decimal input,\n    // and prevents symbols as initial input\n    else if (\n      (value === '0' && total === '0') ||\n      (value === '.' && input.includes(value)) & !ans ||\n      (symbolRegex.test(value) && total === '')\n    ) {\n      return null;\n    }\n\n    // Checks for number inputs including a .(dot)\n    else if (numRegex.test(value)) {\n      setTotal((prevState) =>\n        // If a dot is pressed and the last character is an operation, append a '0' first.\n        // This will make sure a correct number in decimal format is displayed.\n        value === '.' && symbolRegex.test(lastChar)\n          ? prevState + '0.'\n          : // If a dot is pressed after evaluating the expression or if total is empty, use the value of equalCheck.\n          // This will overwrite the total expression and start a new expression to be evaluated later.\n          total.includes('=') || total === ''\n          ? equalCheck\n          : // If the total is just '0' and a number is pressed, replace it by the number.\n          // This will prevent an a number from starting with '0'. e.g., '05+3=8'.\n          total === '0' && !(value === '.')\n          ? value\n          : // If '0' is pressed and the total expression ends in '+0', '-0', '*0', '/0', e.g. '4+0', keep the current total state.\n          // This will prevent adding another '0' at the end of the string.\n          value === '0' && /[+\\-*/]0/.test(secondLastChar + lastChar)\n          ? prevState\n          : // Same condition as above, except when an Integer that is not '0' is pressed.\n          // This will also make sure a number from starting with 0.\n          /[1-9]/.test(value) && /[+\\-*/]0/.test(secondLastChar + lastChar)\n          ? prevState.slice(0, prevState.length - 1) + value\n          : // If the input is correct and all the checks above were passed, append it at the end.\n            prevState + value\n      );\n\n      setInput((prevState) =>\n        // If a dot is pressed and the last character is an operation, append a '0' first.\n        // This will make sure a correct number in decimal format is displayed.\n        value === '.' && symbolRegex.test(lastChar)\n          ? '0.'\n          : // If a dot is pressed after evaluating the expression or if total is empty, use the value of equalCheck.\n          // This will overwrite the total expression and start a new expression to be evaluated later.\n          total.includes('=') || total === ''\n          ? equalCheck\n          : // If a number is pressed and the current input is a '0' and the total's last character is an operator, return the number.\n          // This will overwrite the current input to just the number, and prevent numbers starting from 0.\n          (input === '0' || symbolRegex.test(lastChar)) && !(value === '.')\n          ? value\n          : // If the input is correct and all the checks above were passed, append it at the end.\n            prevState + value\n      );\n\n      setAns('');\n    }\n\n    // Checks for symbol inputs excluding '=' and 'AC'.\n    else if (symbolRegex.test(value)) {\n      // The expression below will determine how much of the total expression will be copied.\n      const index =\n        // If the last character is a number,\n        // or when a '-' is pressed and the total expression ends in a number then symbol, e.g., '6+'\n        // return 0 to copy the entire total expression.\n        // This will allow to add the symbol at the end of the total expression.\n        numRegex.test(lastChar) ||\n        (value === '-' && /[0-9][+*/]/.test(secondLastChar + lastChar))\n          ? 0\n          : // If the total expression ends in '+-', '--', '*-', '/-',\n          // return -2 to prevent copying the last two characters.\n          // This will allow to overwrite the 2 symbols at the end into just 1 symbol\n          // since 3 consecutive symbols is a wrong math expression.\n          /[+\\-*/]-/.test(secondLastChar + '-')\n          ? -2\n          : // If '-' is pressed and the last character from the total expression is already '-',\n          // return null to copy the entire total expression.\n          // This prevents two '-' next to each other.\n          value === '-' && lastChar === '-'\n          ? null\n          : // If a symbol is pressed that is not '-',\n            // return -1 to prevent copying the last character.\n            // This will allow to overwrite the last symbol into another one.\n            -1;\n\n      const copy = total.slice(0, total.length + index);\n\n      // If the total expression was recently evaluated (due to the presence of '='),\n      // Add the operator/symbol at the end of the total expression, overwrite the input to the symbol, and reset the ans.\n      if (total.includes('=')) {\n        setTotal(ans + value);\n        setInput(value);\n        setAns('');\n      }\n      // If the index above was evaluated to null, keep the state as is.\n      else if (index === null) {\n        setTotal((prevState) => prevState);\n        setInput((prevState) => prevState);\n        setAns((prevState) => prevState);\n      }\n      // Set the total expression based on what was copied, then add the symbol.\n      // Also, set the input to the symbol pressed.\n      else {\n        setTotal(copy + value);\n        setInput(value);\n      }\n    }\n\n    // Evaluates the answer using the { evaluate } function from mathjs.\n    // Check if '=' is pressed and the total expression ends in a number and it doesnt contain '='\n    // This prevents evaluating an expression that was already evaluated.\n    else if (\n      value === 'equals' &&\n      numRegex.test(lastChar) &&\n      !total.includes('=')\n    ) {\n      const ans = evaluate(total);\n      setTotal((prevState) => `${prevState}=${ans}`);\n      setInput(`${ans}`);\n      setAns(ans);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Javascript Calculator</h1>\n      {/* Display for the math expression */}\n      <Display stateCopy={{ total, input }} handleClick={handleClick} />\n\n      {/* Profile Link */}\n      <div className=\"credits\">\n        <p>Designed and Coded By</p>\n        <a href=\"https://github.com/pomubry\" target=\"_blank\">\n          <img src={github} alt=\"github icon\" />\n          Bryan Taduran\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}