{"version":3,"sources":["buttons.js","Display.js","App.js","serviceWorker.js","index.js"],"names":["buttons","id","text","value","Display","stateCopy","handleClick","total","input","btn","map","obj","key","onClick","className","style","width","height","padding","backgroundColor","textAlign","display","flexDirection","borderRadius","length","slice","App","state","ans","e","target","symbolRegex","numRegex","lastChar","secondLastChar","setState","includes","test","equalCheck","prevState","index","copy","evaluate","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa38c760.chunk.js","sourcesContent":["let buttons = [\r\n  {\r\n    id: 'zero',\r\n    text: '0',\r\n    value: 0,\r\n  },\r\n  {\r\n    id: 'one',\r\n    text: '1',\r\n    value: 1,\r\n  },\r\n  {\r\n    id: 'two',\r\n    text: '2',\r\n    value: 2,\r\n  },\r\n  {\r\n    id: 'three',\r\n    text: '3',\r\n    value: 3,\r\n  },\r\n  {\r\n    id: 'four',\r\n    text: '4',\r\n    value: 4,\r\n  },\r\n  {\r\n    id: 'five',\r\n    text: '5',\r\n    value: 5,\r\n  },\r\n  {\r\n    id: 'six',\r\n    text: '6',\r\n    value: 6,\r\n  },\r\n  {\r\n    id: 'seven',\r\n    text: '7',\r\n    value: 7,\r\n  },\r\n  {\r\n    id: 'eight',\r\n    text: '8',\r\n    value: 8,\r\n  },\r\n  {\r\n    id: 'nine',\r\n    text: '9',\r\n    value: 9,\r\n  },\r\n  {\r\n    id: 'add',\r\n    text: '+',\r\n    value: '+',\r\n  },\r\n  {\r\n    id: 'subtract',\r\n    text: '-',\r\n    value: '-',\r\n  },\r\n  {\r\n    id: 'multiply',\r\n    text: 'x',\r\n    value: '*',\r\n  },\r\n  {\r\n    id: 'divide',\r\n    text: 'รท',\r\n    value: '/',\r\n  },\r\n  {\r\n    id: 'clear',\r\n    text: 'AC',\r\n    value: 'clear',\r\n  },\r\n  {\r\n    id: 'equals',\r\n    text: '=',\r\n    value: 'equals',\r\n  },\r\n  {\r\n    id: 'decimal',\r\n    text: '.',\r\n    value: '.',\r\n  },\r\n];\r\n\r\nexport default buttons;\r\n","import React from 'react';\r\nimport buttons from './buttons';\r\n\r\nfunction Display({ stateCopy, handleClick }) {\r\n  const { total, input } = stateCopy;\r\n  const btn = buttons.map((obj) => {\r\n    return (\r\n      <button key={obj.id} id={obj.id} onClick={handleClick} value={obj.value}>\r\n        {obj.text}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  const displayStyle = {\r\n    width: 'auto',\r\n    height: '60px',\r\n    padding: '10px',\r\n    backgroundColor: '#D4E4E3',\r\n    textAlign: 'right',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    borderRadius: '10px',\r\n  };\r\n  return (\r\n    <div className=\"calc\">\r\n      <div style={displayStyle}>\r\n        <div className=\"total\" style={{ height: '100%' }}>\r\n          {total.length > 22 ? `...${total.slice(total.length - 22)}` : total}\r\n        </div>\r\n        <div id=\"display\">\r\n          {input.length > 22 ? `...${input.slice(input.length - 22)}` : input}\r\n        </div>\r\n      </div>\r\n      <div className=\"buttons\">{btn}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React, { Component } from 'react';\nimport { evaluate } from 'mathjs';\nimport Display from './Display';\n\nexport class App extends Component {\n  state = {\n    total: '',\n    input: '0',\n    ans: '',\n  };\n\n  handleClick = (e) => {\n    const { value } = e.target;\n    const { input, total, ans } = this.state;\n    const symbolRegex = /[+\\-*/]/;\n    const numRegex = /[0-9]|\\./;\n    const lastChar = total[total.length - 1];\n    const secondLastChar = total[total.length - 2];\n\n    /*Note about state:\n        -'total' refers to the overall expression to be evaluated\n        -'input' refers to the current expression the user is typing   */\n\n    if (value === 'clear') {\n      this.setState({ total: '', input: '0', ans: '' });\n    }\n\n    // Line 33 prevents multiple starting 0's,\n    // prevents multiple decimal input,\n    // and prevents operations as initial input\n    else if (\n      (value === '0' && total === '0') ||\n      (value === '.' && input.includes(value) && !ans) ||\n      (symbolRegex.test(value) && total === '')\n    ) {\n      return null;\n    }\n\n    // Checks for number inputs including a .(dot)\n    else if (numRegex.test(value)) {\n      const equalCheck = value === '.' ? '0.' : value;\n      this.setState((prevState) => ({\n        total:\n          value === '.' && symbolRegex.test(lastChar)\n            ? prevState.total + '0.'\n            : total.includes('=') || total === ''\n            ? equalCheck\n            : total === '0' && !(value === '.')\n            ? value\n            : value === '0' && /[+\\-*/]0/.test(secondLastChar + lastChar)\n            ? prevState.total\n            : /[1-9]/.test(value) && /[+\\-*/]0/.test(secondLastChar + lastChar)\n            ? prevState.total.slice(0, prevState.total.length - 1) + value\n            : prevState.total + value,\n        input:\n          value === '.' && symbolRegex.test(lastChar)\n            ? '0.'\n            : total.includes('=') || total === ''\n            ? equalCheck\n            : (input === '0' || symbolRegex.test(lastChar)) && !(value === '.')\n            ? value\n            : prevState.input + value,\n        ans: '',\n      }));\n    }\n\n    // Checks for symbol inputs excluding '=' and 'AC'\n    else if (symbolRegex.test(value)) {\n      const index =\n        numRegex.test(lastChar) ||\n        (value === '-' && /[0-9][+*/]/.test(secondLastChar + lastChar))\n          ? 0\n          : /[+\\-*/]-/.test(secondLastChar + '-')\n          ? -2\n          : value === '-' && lastChar === '-'\n          ? null\n          : -1;\n      const copy = total.slice(0, total.length + index);\n      total.includes('=')\n        ? this.setState((prevState) => ({\n            total: prevState.ans + value,\n            input: value,\n            ans: '',\n          }))\n        : index === null\n        ? this.setState({ total, input, ans })\n        : this.setState({ total: copy + value, input: value });\n    }\n\n    // Evaluates the answer using the { evaluate } function from mathjs\n    else if (\n      value === 'equals' &&\n      numRegex.test(lastChar) &&\n      !total.includes('=')\n    ) {\n      this.setState((prevState) => {\n        const ans = evaluate(prevState.total);\n        return {\n          total: `${prevState.total}=${ans}`,\n          input: `${ans}`,\n          ans,\n        };\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Display stateCopy={this.state} handleClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}